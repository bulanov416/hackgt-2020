{"version":3,"sources":["static/assets/loading_gif.gif","helpers/NCRRequest.js","pages/AddMenuItem.js","components/RestaurantNavbar.js","components/OrderItem.js","pages/ActiveOrders.js","pages/DashboardItem.js","pages/Dashboard.js","App.js","serviceWorker.js","components/Firebase.js","index.js"],"names":["module","exports","require","AddMenuItem","props","database","useState","itemName","setItemName","price","setPrice","category","setCategory","description","setDescription","className","Container","Form","Group","controlId","Label","Control","placeholder","onChange","event","target","value","InputGroup","Prepend","Text","id","type","aria-describedby","name","as","rows","Button","size","variant","block","onClick","tempName","tempPrice","tempCategory","tempDescription","collection","doc","replace","c","r","Math","random","toString","set","Category","Name","Price","Description","then","document","location","catch","err","console","error","RestaurantNavbar","updatePage","Navbar","bg","expand","style","Brand","href","Toggle","aria-controls","Collapse","Nav","Link","OrderItem","quantity","notes","ListGroup","Item","Row","Col","xs","Badge","pill","ActiveOrders","currentTable","setCurrentTable","orders","setOrders","status","setStatus","tableHandler","tableNum","get","exists","data","log","orderItems","forEach","order","orderJSON","JSON","parse","dishName","dishCount","count","dishComments","comments","push","Card","Body","src","loading","alt","nextStatus","DashboardItem","total","days","times","class","Dashboard","App","pageIndex","setPageIndex","i","Boolean","window","hostname","match","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","Firebase","children","firestore","setFirestore","useEffect","firebase","initializeApp","childrenWithProps","React","Children","map","child","properties","isValidElement","cloneElement","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.81cc684d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/loading_gif.d452daac.gif\";","const CryptoJS = require(\"crypto-js\");\r\n\r\nlet environment = {\r\n    \"cors-anywhere\": \"https://cors-anywhere.herokuapp.com/\",\r\n    \"site-service\": \"https://gateway-staging.ncrcloud.com/site\",\r\n    \"security-service\": \"https://gateway-staging.ncrcloud.com/security\",\r\n    \"order-service\": \"https://gateway-staging.ncrcloud.com/order/3/orders/1\",\r\n    \"tdm-service\": \"https://gateway-staging.ncrcloud.com/transaction-document/transaction-documents\",\r\n    \"cdm-service\": \"https://gateway-staging.ncrcloud.com/cdm\",\r\n    \"catalog-items-service\": \"https://gateway-staging.ncrcloud.com/catalog/items\",\r\n    \"selling-service\":\"https://gateway-staging.ncrcloud.com/emerald/selling-service/v1/carts\",\r\n    \"selling-configuration-service\":\"https://gateway-staging.ncrcloud.com/emerald/selling-service/c1\",\r\n    \"catalog-service\":\"https://gateway-staging.ncrcloud.com/catalog/2\",\r\n    \"bsp-organization\": \"f67a5f37952346ed8f72995919b687e3\",\r\n    \"bsp-site-id\": \"766adbd7a7e549938e28c6ac5ac66565\",\r\n    \"bsp-shared-key\": \"1fc0b35e4ce7470db0af5de63aa780ae\",\r\n    \"bsp-secret-key\": \"b6e472097ba34186afd9c11d7ca24c0b\",\r\n    \"version-num\": \"3\",\r\n};\r\n\r\n// Ensures any content has variables substituted; supports recursive\r\n// resolution (environment variable that references environment/global variables)\r\nconst convertVariables = function(templateContent) {\r\n    const regexPattern = /({{(.*?)}})/g;\r\n    let convertedContent = templateContent;\r\n    let matchedVar = new RegExp(regexPattern).exec(convertedContent);\r\n    while (matchedVar !== null) {\r\n        const variableReplacement = matchedVar[1];\r\n        const variableName = matchedVar[2];\r\n        const variableValue = environment[variableName];\r\n        convertedContent = convertedContent.replace(variableReplacement, variableValue);\r\n        matchedVar = new RegExp(regexPattern).exec(convertedContent);\r\n    }\r\n    return convertedContent;\r\n}\r\n\r\n// Extracts the signable content from the request\r\nconst signableContent = function(request) {\r\n    const requestPath = convertVariables(request.url.trim()).replace(/^https?:\\/\\/[^\\/]+\\//, '/');\r\n    const params = [\r\n        request.method,\r\n        requestPath,\r\n        request.headers['content-type'],\r\n        request.headers['content-md5'],\r\n        convertVariables(request.headers['nep-organization'])\r\n    ];\r\n    return params.filter(p => p && p.length > 0).join('\\n');\r\n}\r\n\r\n// Generates a unique date-based signing key\r\nconst uniqueKey = function(date) {\r\n    const nonce = date.toISOString().slice(0, 19) + '.000Z';\r\n    return environment['bsp-secret-key'] + nonce;\r\n};\r\n\r\n// Calculates the HMAC signature\r\nconst calculateSignature = function(req) {\r\n    const date = new Date();\r\n    environment['date'] = date.toGMTString();\r\n    const key = uniqueKey(date);\r\n    const sc = signableContent(req);\r\n    const hmac = CryptoJS.HmacSHA512(sc, key);\r\n    return CryptoJS.enc.Base64.stringify(hmac);\r\n};\r\n\r\nfunction NCRRequest(path, body, headers, method) {\r\n    const date = new Date();\r\n    const varpath = convertVariables(path);\r\n    headers.append(\"Date\", date.toGMTString());\r\n    headers.append(\"Origin\", varpath);\r\n\r\n    let requestOptions = {\r\n        method: method,\r\n        headers: headers,\r\n        body: convertVariables(body),\r\n        redirect: 'follow',\r\n        url: environment[\"cors-anywhere\"] + varpath,\r\n        mode: 'cors',\r\n    };\r\n\r\n    let req = new Request(requestOptions.url, requestOptions);\r\n\r\n    // Stores the generated HMAC signature under the access key\r\n    const signature = calculateSignature(req);\r\n    const sharedKey = environment['bsp-shared-key'];\r\n    environment['bsp-access-key'] = `AccessKey ${sharedKey}:${signature}`;\r\n\r\n    console.log(environment['bsp-access-key']);\r\n    requestOptions.headers.append(\"Authorization\", environment['bsp-access-key']);\r\n\r\n    return new Promise((resolve, reject) => {\r\n        fetch(req)\r\n            .then(response => resolve(response))\r\n            .catch(error => reject(error));\r\n    });\r\n\r\n}\r\n\r\nexport default NCRRequest;\r\n","import React, { useState } from 'react';\r\n\r\nimport Form from 'react-bootstrap/Form';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Container from 'react-bootstrap/Container';\r\nimport InputGroup from 'react-bootstrap/InputGroup';\r\nimport { createCategoryItem } from '../helpers/NCRHelpers.js';\r\n\r\nfunction uuidv4() {\r\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\r\n      var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);\r\n      return v.toString(16);\r\n    });\r\n}\r\n\r\nfunction AddMenuItem(props) {\r\n    const { database } = props\r\n\r\n    const [ itemName, setItemName ] = useState(\"\");\r\n    const [ price, setPrice] = useState(0);\r\n    const [ category, setCategory ] = useState(\"Appetizer\");\r\n    const [ description, setDescription ] = useState(\"\");\r\n\r\n    const menuItemChangeHandler = (event) => {\r\n        setItemName(event.target.value);\r\n    }\r\n\r\n    const priceChangeHandler = (event) => {\r\n        setPrice(event.target.value);\r\n    }\r\n\r\n    const categoryChangeHandler = (event) => {\r\n        setCategory(event.target.value);\r\n    }\r\n\r\n    const descriptionChangeHandler = (event) => {\r\n        setDescription(event.target.value);\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <Container>\r\n                <Form>\r\n                    <Form.Group controlId=\"menuForm.ControlInput1\">\r\n                        <Form.Label>Menu Item</Form.Label>\r\n                        <Form.Control placeholder='10\" Pizza' onChange={menuItemChangeHandler}/>\r\n                    </Form.Group>\r\n                    <Form.Group  controlId=\"menuForm.ControlInput2\">\r\n                        <Form.Label>Price</Form.Label>\r\n                        <InputGroup>\r\n                            <InputGroup.Prepend>\r\n                                <InputGroup.Text id=\"inputGroupPrepend\">$</InputGroup.Text>\r\n                            </InputGroup.Prepend>\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                placeholder=\"5.00\"\r\n                                aria-describedby=\"inputGroupPrepend\"\r\n                                name=\"price\"\r\n                                onChange={priceChangeHandler}\r\n                            />\r\n                        </InputGroup>\r\n                    </Form.Group>\r\n                    <Form.Group controlId=\"menuForm.ControlSelect1\">\r\n                        <Form.Label>Category</Form.Label>\r\n                        <Form.Control as=\"select\" onChange={categoryChangeHandler}>\r\n                            <option>Appetizer</option>\r\n                            <option>Entree</option>\r\n                            <option>Side</option>\r\n                            <option>Dessert</option>\r\n                            <option>Beverage</option>\r\n                        </Form.Control>\r\n                    </Form.Group>\r\n                    <Form.Group controlId=\"menuForm.ControlTextarea1\">\r\n                        <Form.Label>Description</Form.Label>\r\n                        <Form.Control as=\"textarea\" rows=\"3\" onChange={descriptionChangeHandler}/>\r\n                    </Form.Group>\r\n                    <Button size = {'lg'} variant=\"primary\" type=\"\" block onClick={() => {\r\n                        let tempName = itemName;\r\n                        let tempPrice = price;\r\n                        let tempCategory = category;\r\n                        let tempDescription = description;\r\n                        database.collection('restaurants').doc('rFxSt5fTT3Kp4NphAomx').collection('menuItems').doc(uuidv4()).set({\r\n                            Category: tempCategory,\r\n                            Name: tempName,\r\n                            Price: tempPrice,\r\n                            Description: tempDescription\r\n                        })\r\n                            .then(function() {\r\n                                document.location = \"/\";\r\n                            })\r\n                            .catch(function(err) {\r\n                                console.error(err);\r\n                        })\r\n\r\n                    }}>\r\n                        Submit\r\n                    </Button>\r\n                </Form>\r\n            </Container>\r\n        </div>\r\n    );\r\n  }\r\n\r\n  export default AddMenuItem;\r\n","import React from 'react';\r\n\r\nimport Navbar from 'react-bootstrap/Navbar';\r\nimport Nav from 'react-bootstrap/Nav';\r\n\r\nfunction RestaurantNavbar(props) {\r\n\r\n    const { updatePage } = props;\r\n\r\n    return (\r\n        <Navbar bg=\"light\" expand=\"lg\" style={{'zIndex': '2'}}>\r\n            <Navbar.Brand href=\"#home\">Olive Garden</Navbar.Brand>\r\n            <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n            <Navbar.Collapse id=\"basic-navbar-nav\">\r\n                <Nav className=\"mr-auto\">\r\n                    <Nav.Link href={\"#\"} onClick={() => {updatePage(2);}}> Dashboard </Nav.Link>\r\n                    <Nav.Link href=\"#\" onClick={() => {updatePage(0);}}>Orders</Nav.Link>\r\n                    <Nav.Link href=\"#\" onClick={() => {updatePage(1);}}>Add Menu Item</Nav.Link>\r\n                </Nav>\r\n            </Navbar.Collapse>\r\n        </Navbar>\r\n    );\r\n}\r\n\r\nexport default RestaurantNavbar;\r\n","import React from 'react';\r\n\r\nimport ListGroup from \"react-bootstrap/ListGroup\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport Badge from \"react-bootstrap/Badge\";\r\n\r\nfunction OrderItem(props) {\r\n\r\n    const {name, quantity, notes} = props;\r\n\r\n    return (\r\n        <ListGroup.Item>\r\n            <Row style={{\"textAlign\":\"left\"}}>\r\n                <Col xs={1}><Badge pill variant=\"dark\">{ quantity }</Badge></Col>\r\n                <Col xs={11}><h5>{ name }</h5></Col>\r\n            </Row>\r\n            {\r\n                notes &&\r\n                <Row style={{\"textAlign\": \"left\"}}>\r\n                    <Col xs={1}/>\r\n                    <Col xs={11}><p> {notes} </p></Col>\r\n                </Row>\r\n            }\r\n        </ListGroup.Item>\r\n    );\r\n}\r\nexport default OrderItem;\r\n","import React, { useState } from 'react';\r\n\r\nimport '../static/css/ActiveOrders.css';\r\n\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Card from \"react-bootstrap/Card\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport loading from \"../static/assets/loading_gif.gif\";\r\nimport Navbar from 'react-bootstrap/Navbar';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nimport OrderItem from \"../components/OrderItem\";\r\n\r\n\r\n//page for viewing the active orders\r\nfunction ActiveOrders(props) {\r\n\r\n    const { database } = props\r\n\r\n\r\n    const [ currentTable, setCurrentTable ] = useState(1);\r\n    const [ orders, setOrders ] = useState([]);\r\n    const [ status, setStatus ] = useState(\"Order Pending\");\r\n\r\n    const tableHandler = (tableNum) => {\r\n        setCurrentTable(tableNum);\r\n\r\n        var docRef = database.collection('restaurants').doc(\"rFxSt5fTT3Kp4NphAomx\").collection('tables').doc('table'+tableNum);\r\n\r\n        docRef.get().then(function(doc) {\r\n            if (doc.exists) {\r\n                setOrders(doc.data().orders);\r\n                setStatus(doc.data().status);\r\n            } else {\r\n                // doc.data() will be undefined in this case\r\n                console.log(\"No such document!\");\r\n            }\r\n        }).catch(function(error) {\r\n            console.log(\"Error getting document:\", error);\r\n        });\r\n\r\n        console.log('CurrentTable: ', currentTable);\r\n        console.log('Orders: ', orders);\r\n        console.log('Status: ', status);\r\n    }\r\n\r\n    const orderItems = [];\r\n    if (orders != null) {\r\n        orders.forEach((order) => {\r\n            let orderJSON = JSON.parse(order);\r\n            let dishName = orderJSON.name;\r\n            let dishCount = orderJSON.count;\r\n            let dishComments = orderJSON.comments;\r\n            orderItems.push(<OrderItem name={dishName} quantity={dishCount} notes={dishComments}/>);\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div className={\"active-orders\"}>\r\n            <div className = \"split left\">\r\n                <div className = \"tables\">\r\n                    <Container style={{'height': '100%'}}>\r\n                        <Col>\r\n                            <Row style={{'height': '80%'}}>\r\n                                <p><br></br></p>\r\n                            </Row>\r\n                        </Col>\r\n                        <a onClick={() => {tableHandler(1)}}>\r\n                            <Card style={{'height': '25%'}}>\r\n                                <Card.Body>TABLE 1</Card.Body>\r\n                            </Card>\r\n                        </a>\r\n                        <Col>\r\n                            <Row style={{'height': '80%'}}>\r\n                                <p><br></br></p>\r\n                            </Row>\r\n                        </Col>\r\n                        <a onClick={() => {tableHandler(2)}}>\r\n                            <Card style={{'height': '25%'}}>\r\n                                <Card.Body>TABLE 2</Card.Body>\r\n                            </Card>\r\n                        </a>\r\n                        <Col>\r\n                            <Row style={{'height': '80%'}}>\r\n                                <p><br></br></p>\r\n                            </Row>\r\n                        </Col>\r\n                        <a onClick={() => {tableHandler(3)}}>\r\n                            <Card style={{'height': '25%'}}>\r\n                                <Card.Body>TABLE 3</Card.Body>\r\n                            </Card>\r\n                        </a>\r\n                    </Container>\r\n                </div>\r\n            </div>\r\n            <div className={\"split right\"}>\r\n                <Row className={'justify-content-center'} style={{\"marginTop\":\"56px\"}}>\r\n                    <Col>\r\n                        <h1 style={{\"width\":\"100%\"}}>Table {currentTable}</h1>\r\n                        <Container style={{'padding':'0px'}}>\r\n                            {\r\n                                (orders != {}) ? orderItems :\r\n                                <div style={{'width': '100%', 'textAlign': 'center'}}>\r\n                                    <img src={loading} style={{'width': '20px'}} alt='loading...'/>\r\n                                </div>\r\n                            }\r\n                        </Container>\r\n                    </Col>\r\n                </Row>\r\n                <Row className={\"justify-content-center fix-bottom\"} style={{\"width\":\"32%\"}}>\r\n                    <Col style={{\"paddingRight\":\"0px\"}}>\r\n                        <Button size={'lg'} variant={\"success\"} style={{\"width\":\"100%\"}} onClick={() => {\r\n                            let nextStatus = \"\";\r\n                            if (status == \"Order Pending\") {\r\n                                nextStatus = \"Order Received\";\r\n                            } else if (status == \"Order Received\") {\r\n                                nextStatus = \"Food Ready\";\r\n                            } else if (status == \"Food Ready\") {\r\n                                nextStatus = \"Meal Finished\";\r\n                            } else if (status == \"Meal Finished\") {\r\n                                nextStatus = \"Table Sanitized - Press to Reset\";\r\n                            } else if (status == \"Table Sanitized - Press to Reset\") {\r\n                                nextStatus = \"Order Pending\";\r\n                                database.collection('restaurants').doc('rFxSt5fTT3Kp4NphAomx').collection('tables').doc('table'+currentTable).set({\r\n                                    orders: {},\r\n                                    status: \"Order Pending\"\r\n                                })\r\n                                .then(function() {\r\n                                    document.location = \"/\";\r\n                                })\r\n                            }\r\n                            setStatus(nextStatus);\r\n                            database.collection('restaurants').doc('rFxSt5fTT3Kp4NphAomx').collection('tables').doc('table'+currentTable).set({\r\n                                orders: orders,\r\n                                status: nextStatus\r\n                            })\r\n                        }}>{status}</Button>\r\n                    </Col>\r\n                </Row>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ActiveOrders;\r\n","import React from 'react';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Card from \"react-bootstrap/Card\";\r\n\r\nfunction DashboardItem(props) {\r\n\r\n    const { total, days, times } = props;\r\n\r\n    return (\r\n        <>\r\n            <Card bg='secondary'>\r\n                <Card.Body>\r\n                    <p class=\"font-weight-bold\">{days}</p><Card.Text className=\"mb-2\"> were the busiest days this week.</Card.Text>\r\n                </Card.Body>\r\n            </Card>\r\n            <br></br>\r\n            <Card bg = 'success'>\r\n                <Card.Body>\r\n                        <Card.Text className=\"mb-2\">Successfully served <b>{ total }</b> parties within the past week.</Card.Text>\r\n                </Card.Body>\r\n            </Card>\r\n            <br></br>\r\n            <Card bg='secondary'>\r\n                <Card.Body>\r\n                <p class=\"font-weight-bold\">{times}</p><Card.Text className=\"mb-2\"> was the busiest time this week.</Card.Text>\r\n                </Card.Body>\r\n            </Card>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default DashboardItem;\r\n","//dashboard for restaurant to track analytics and see patterns/trends they can use \r\n//for example, know which days busier and needs more staff \r\n//\"successfully served 34 parties within this week\" \r\n//Thursday and Friday evenings && 6-8 PM were the busiest times this week \r\n\r\nimport React from \"react\";\r\n\r\nimport DashboardItem from \"../pages/DashboardItem\";\r\nimport Container from \"react-bootstrap/Container\";\r\n\r\nfunction Dashboard() {\r\n    return(\r\n        <Container style={{'padding':'0px'}}>\r\n            <h1 class = \"text-center\">Dashboard</h1>\r\n            <br></br>\r\n            <DashboardItem total={\"34\"} days={\"Thursday and Friday\"}  times={\"6-8 PM\"}/>\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default Dashboard;","import React, { useState } from 'react';\r\n\r\nimport AddMenuItem from \"./pages/AddMenuItem\";\r\nimport RestaurantNavbar from \"./components/RestaurantNavbar\";\r\nimport ActiveOrders from \"./pages/ActiveOrders\";\r\nimport Dashboard from './pages/Dashboard';\r\n\r\nfunction App(props) {\r\n    const { database } = props;\r\n    const [pageIndex, setPageIndex] = useState(0);\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <RestaurantNavbar updatePage={(i) => {\r\n                setPageIndex(i);\r\n            }}/>\r\n            { pageIndex === 0 ? <ActiveOrders database = { database }/> : <></>}\r\n            { pageIndex === 1 ? <AddMenuItem database = { database }/> : <></>}\r\n            { pageIndex === 2 ? <Dashboard /> : <></>}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { useEffect, useState } from 'react';\r\n\r\nimport firebase from 'firebase';\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyAUrlthvN7-mzjShK52AfthkX6yepCuwgk\",\r\n    authDomain: \"hackgt2020-5847e.firebaseapp.com\",\r\n    databaseURL: \"https://hackgt2020-5847e.firebaseio.com\",\r\n    projectId: \"hackgt2020-5847e\",\r\n    storageBucket: \"hackgt2020-5847e.appspot.com\",\r\n    messagingSenderId: \"838591600721\",\r\n    appId: \"1:838591600721:web:829023369df328b7a18070\"\r\n};\r\n\r\nfunction Firebase(props) {\r\n    const { children } = props;\r\n    const [ firestore, setFirestore ] = useState(null);\r\n\r\n    useEffect(() => {\r\n        firebase.initializeApp(firebaseConfig);\r\n        const database = firebase.firestore();\r\n        setFirestore(database);\r\n    }, []);\r\n\r\n    const childrenWithProps = React.Children.map(children, child => {\r\n        // checking isValidElement is the safe way and avoids a typescript error too\r\n        const properties = { database: firestore };\r\n        if (React.isValidElement(child)) {\r\n            return React.cloneElement(child, properties);\r\n        }\r\n        return child;\r\n    });\r\n\r\n    return (\r\n        <div> { childrenWithProps } </div>\r\n    );\r\n}\r\n\r\nexport default Firebase;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport Firebase from './components/Firebase';\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Firebase>\r\n      <App/>\r\n    </Firebase>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}